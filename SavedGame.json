{
    "$id": 0,
    "$type": "0|SaveGame, Assembly-CSharp",
    "LevelsCompleted": 0,
    "playerHost": {
        "$id": 1,
        "$type": "1|PlayerInfo, Assembly-CSharp",
        "Points": 0,
        "playerVelocity": 9,
        "playersMaxHealth": 100,
        "playersCurrentHealth": 100,
        "playersMaxShield": 300,
        "playersCurrentShield": 300,
        "RegenerationShieldValue": 0.3,
        "Sensibility": 0.3,
        "MemorySlots": {
            "$id": 2,
            "$type": "2|System.Collections.Generic.List`1[[SlotOfMemory, Assembly-CSharp]], mscorlib",
            "$rlength": 3,
            "$rcontent": [
                {
                    "$id": 3,
                    "$type": "3|SlotOfMemory, Assembly-CSharp",
                    "Power": 0.619305,
                    "Accuracy": 1,
                    "Frequency": 1,
                    "MaxRange": 50,
                    "MaxForce": 700,
                    "MaxNumOfBulletsPerBurst": 20,
                    "MaxCooldownBetweenBullets": 2,
                    "MaxAmmunition": 100,
                    "RegenerationValueAmmunition": 0.1,
                    "MaxWasteOfAmmunitionValue": 100,
                    "DamageBaseWeapon": 100
                },
                {
                    "$id": 4,
                    "$type": 3,
                    "Power": 1,
                    "Accuracy": 1,
                    "Frequency": 1,
                    "MaxRange": 50,
                    "MaxForce": 700,
                    "MaxNumOfBulletsPerBurst": 20,
                    "MaxCooldownBetweenBullets": 2,
                    "MaxAmmunition": 100,
                    "RegenerationValueAmmunition": 0.1,
                    "MaxWasteOfAmmunitionValue": 100,
                    "DamageBaseWeapon": 100
                },
                {
                    "$id": 5,
                    "$type": 3,
                    "Power": 1,
                    "Accuracy": 1,
                    "Frequency": 1,
                    "MaxRange": 50,
                    "MaxForce": 700,
                    "MaxNumOfBulletsPerBurst": 20,
                    "MaxCooldownBetweenBullets": 2,
                    "MaxAmmunition": 100,
                    "RegenerationValueAmmunition": 0.1,
                    "MaxWasteOfAmmunitionValue": 100,
                    "DamageBaseWeapon": 100
                }
            ]
        },
        "abilities": {
            "$id": 6,
            "$type": "4|System.Collections.Generic.List`1[[Skills, Assembly-CSharp]], mscorlib",
            "$rlength": 4,
            "$rcontent": [
                {
                    "$id": 7,
                    "$type": "5|Skill1, Assembly-CSharp",
                    "Name": "Faster",
                    "Description": "This ability makes that during 1 minute the player will have a 25% more velocity.",
                    "Image": null
                },
                {
                    "$id": 8,
                    "$type": "6|Skill2, Assembly-CSharp",
                    "Name": "I Am Healthy",
                    "Description": "During 1 minute the player will have 25% more of max health and will recover all current health.",
                    "Image": null
                },
                {
                    "$id": 9,
                    "$type": "7|Skill3, Assembly-CSharp",
                    "Name": "Armor Man",
                    "Description": "During 1 minute the player will have 25% more of max Shield and will recover all current shield.",
                    "Image": null
                },
                {
                    "$id": 10,
                    "$type": "8|Skill4, Assembly-CSharp",
                    "Name": "Armor Man",
                    "Description": "During 1 minute the player will have 25% more of max Shield and will recover all current shield.",
                    "Image": null
                }
            ]
        }
    },
    "powerBulletHost": {
        "$id": 11,
        "$type": "9|System.Collections.Generic.List`1[[PowerBulletSO, Assembly-CSharp]], mscorlib",
        "$rlength": 14,
        "$rcontent": [
            {
                "$id": 12,
                "$type": "10|PowerBulletSO, Assembly-CSharp",
                "ScaleInvestment": 15,
                "Name": "Surface's Boucilng Bullet",
                "Description": "This bullet bounces off surfaces ",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 6,
                "type": 1
            },
            {
                "$id": 13,
                "$type": 10,
                "ScaleInvestment": 15,
                "Name": "Bouncing Bullet",
                "Description": "This bullet bounces off enemies ",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 5,
                "type": 1
            },
            {
                "$id": 14,
                "$type": 10,
                "ScaleInvestment": 23,
                "Name": "Critical bullet ",
                "Description": "This bullet has a probability to make a cr\u00edtical damage to an Enemy",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 11,
                "type": 1
            },
            {
                "$id": 15,
                "$type": 10,
                "ScaleInvestment": 7,
                "Name": "Double Force Bullet",
                "Description": "This bullet  makes extra force when hit an enemy",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 2,
                "type": 0
            },
            {
                "$id": 16,
                "$type": 10,
                "ScaleInvestment": 3,
                "Name": "Expand Bullet",
                "Description": "This bullet create a little expansive wave to separe enemies ",
                "InvestmentValue": 5,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 1,
                "type": 0
            },
            {
                "$id": 17,
                "$type": 10,
                "ScaleInvestment": 6,
                "Name": "Explosive Bullet",
                "Description": "This Bullet has a probability to explode when hits an enemy",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 10,
                "type": 1
            },
            {
                "$id": 18,
                "$type": 10,
                "ScaleInvestment": 17,
                "Name": "Flame Bullet ",
                "Description": "This bullet has a probability of taking fire damage every second during 20 seconds",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 7,
                "type": 1
            },
            {
                "$id": 19,
                "$type": 10,
                "ScaleInvestment": 17,
                "Name": "Health Stealth Bullet",
                "Description": "This bullet steal health the enemy to bring it to the player.",
                "InvestmentValue": 0.33,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 8,
                "type": 0
            },
            {
                "$id": 20,
                "$type": 10,
                "ScaleInvestment": 11,
                "Name": "MultiplierBullet",
                "Description": "This bullet divides in two other bullets that goes across enemies ",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 4,
                "type": 1
            },
            {
                "$id": 21,
                "$type": 10,
                "ScaleInvestment": 11,
                "Name": "Piercing Bullet",
                "Description": "This bullet goes across enemies",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 3,
                "type": 1
            },
            {
                "$id": 22,
                "$type": 10,
                "ScaleInvestment": 17,
                "Name": "Shield Stealth Bullet",
                "Description": "This bullet steal shield the enemy to bring it to the player.",
                "InvestmentValue": 0.33,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 9,
                "type": 0
            },
            {
                "$id": 23,
                "$type": 10,
                "ScaleInvestment": 6,
                "Name": "Stune Bullet",
                "Description": "This Bullet when is activated it will stune an enemy ",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 0,
                "type": 1
            },
            {
                "$id": 24,
                "$type": 10,
                "ScaleInvestment": 26,
                "Name": "Terrifier Bullet ",
                "Description": "This bullet puts and enemy in terrified state temporally",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 12,
                "type": 1
            },
            {
                "$id": 25,
                "$type": 10,
                "ScaleInvestment": 25,
                "Name": "TimeSlow Bullet",
                "Description": "This bullet decrease the cooldown between attacks of an enemy and decrease the velocity of this",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 13,
                "type": 1
            }
        ]
    },
    "playerClient": {
        "$id": 26,
        "$type": 1,
        "Points": 0,
        "playerVelocity": 10,
        "playersMaxHealth": 100,
        "playersCurrentHealth": 100,
        "playersMaxShield": 300,
        "playersCurrentShield": 300,
        "RegenerationShieldValue": 0.3,
        "Sensibility": 0.3,
        "MemorySlots": {
            "$id": 27,
            "$type": 2,
            "$rlength": 3,
            "$rcontent": [
                {
                    "$id": 28,
                    "$type": 3,
                    "Power": 1,
                    "Accuracy": 1,
                    "Frequency": 1,
                    "MaxRange": 0,
                    "MaxForce": 0,
                    "MaxNumOfBulletsPerBurst": 0,
                    "MaxCooldownBetweenBullets": 0,
                    "MaxAmmunition": 0,
                    "RegenerationValueAmmunition": 0,
                    "MaxWasteOfAmmunitionValue": 0,
                    "DamageBaseWeapon": 0
                },
                {
                    "$id": 29,
                    "$type": 3,
                    "Power": 1,
                    "Accuracy": 1,
                    "Frequency": 1,
                    "MaxRange": 0,
                    "MaxForce": 0,
                    "MaxNumOfBulletsPerBurst": 0,
                    "MaxCooldownBetweenBullets": 0,
                    "MaxAmmunition": 0,
                    "RegenerationValueAmmunition": 0,
                    "MaxWasteOfAmmunitionValue": 0,
                    "DamageBaseWeapon": 0
                },
                {
                    "$id": 30,
                    "$type": 3,
                    "Power": 1,
                    "Accuracy": 1,
                    "Frequency": 1,
                    "MaxRange": 0,
                    "MaxForce": 0,
                    "MaxNumOfBulletsPerBurst": 0,
                    "MaxCooldownBetweenBullets": 0,
                    "MaxAmmunition": 0,
                    "RegenerationValueAmmunition": 0,
                    "MaxWasteOfAmmunitionValue": 0,
                    "DamageBaseWeapon": 0
                }
            ]
        },
        "abilities": {
            "$id": 31,
            "$type": 4,
            "$rlength": 4,
            "$rcontent": [
                $iref:7,
                $iref:8,
                $iref:9,
                $iref:10
            ]
        }
    },
    "powerBulletClient": {
        "$id": 32,
        "$type": 9,
        "$rlength": 14,
        "$rcontent": [
            {
                "$id": 33,
                "$type": 10,
                "ScaleInvestment": 15,
                "Name": "Surface's Boucilng Bullet",
                "Description": "This bullet bounces off surfaces",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 6,
                "type": 1
            },
            {
                "$id": 34,
                "$type": 10,
                "ScaleInvestment": 15,
                "Name": "Bouncing Bullet",
                "Description": "This bullet bounces off enemies ",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 5,
                "type": 1
            },
            {
                "$id": 35,
                "$type": 10,
                "ScaleInvestment": 23,
                "Name": "Critical bullet ",
                "Description": "This bullet has a probability to make a cr\u00edtical damage to an Enemy",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 11,
                "type": 1
            },
            {
                "$id": 36,
                "$type": 10,
                "ScaleInvestment": 7,
                "Name": "Double Force Bullet",
                "Description": "This bullet  makes extra force when hit an enemy",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 2,
                "type": 0
            },
            {
                "$id": 37,
                "$type": 10,
                "ScaleInvestment": 3,
                "Name": "Expand Bullet",
                "Description": "This bullet create a little expansive wave to separe enemies ",
                "InvestmentValue": 5,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 1,
                "type": 0
            },
            {
                "$id": 38,
                "$type": 10,
                "ScaleInvestment": 0,
                "Name": "Explosive Bullet",
                "Description": "This Bullet has a probability to explode when hits an enemy",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 10,
                "type": 1
            },
            {
                "$id": 39,
                "$type": 10,
                "ScaleInvestment": 17,
                "Name": "Flame Bullet ",
                "Description": "This bullet has a probability of taking fire damage every second during 20 seconds",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 7,
                "type": 1
            },
            {
                "$id": 40,
                "$type": 10,
                "ScaleInvestment": 17,
                "Name": "Health Stealth Bullet",
                "Description": "This bullet steal health the enemy to bring it to the player.",
                "InvestmentValue": 0.33,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 8,
                "type": 0
            },
            {
                "$id": 41,
                "$type": 10,
                "ScaleInvestment": 11,
                "Name": "MultiplierBullet",
                "Description": "This bullet divides in two other bullets that goes across enemies ",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 4,
                "type": 1
            },
            {
                "$id": 42,
                "$type": 10,
                "ScaleInvestment": 11,
                "Name": "Piercing Bullet",
                "Description": "This bullet goes across enemies",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 3,
                "type": 1
            },
            {
                "$id": 43,
                "$type": 10,
                "ScaleInvestment": 17,
                "Name": "Shield Stealth Bullet",
                "Description": "This bullet steal shield the enemy to bring it to the player.",
                "InvestmentValue": 0.33,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 8,
                "type": 0
            },
            {
                "$id": 44,
                "$type": 10,
                "ScaleInvestment": 6,
                "Name": "Stune Bullet",
                "Description": "This Bullet when is activated it will stune an enemy ",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 0,
                "type": 1
            },
            {
                "$id": 45,
                "$type": 10,
                "ScaleInvestment": 26,
                "Name": "Terrifier Bullet ",
                "Description": "This bullet puts and enemy in terrified state temporally",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 12,
                "type": 1
            },
            {
                "$id": 46,
                "$type": 10,
                "ScaleInvestment": 25,
                "Name": "TimeSlow Bullet",
                "Description": "This bullet decrease the cooldown between attacks of an enemy and decrease the velocity of this",
                "InvestmentValue": 0.25,
                "currentInvestmentValue": 0,
                "Points": 0,
                "id": 13,
                "type": 1
            }
        ]
    },
    "missions": {
        "$id": 47,
        "$type": "11|System.Collections.Generic.List`1[[Mission, Assembly-CSharp]], mscorlib",
        "$rlength": 1,
        "$rcontent": [
            {
                "$id": 48,
                "$type": "12|MissionCountToTarget, Assembly-CSharp",
                "idMission": 0,
                "Done": false,
                "Points": 5,
                "Title": "MATAR",
                "Description": "MATA!!! HAZ LA MORICI\u00d3N!! DESTRUYE!!! QUEM... Espera acabo de poner 'morici\u00f3n'? (mata 3 enemigos)",
                "Event": {
                    "$id": 49,
                    "$type": "13|MissionEvent, Assembly-CSharp"
                },
                "totalAmount": 3,
                "currentAmount": 0
            }
        ]
    },
    "missionIntParam": {
        "$id": 50,
        "$type": "14|System.Collections.Generic.List`1[[Mission`1[[System.Int32, mscorlib]], Assembly-CSharp]], mscorlib",
        "$rlength": 1,
        "$rcontent": [
            {
                "$id": 51,
                "$type": "15|MissionAccumulativeToTarget, Assembly-CSharp",
                "idMission": 0,
                "Done": false,
                "Points": 3,
                "Title": "Alcanzame Si Puedes",
                "Description": "Llega  a lo largo del nivel a una cantidad total de da\u00f1o de 300 o mayor",
                "Event": {
                    "$id": 52,
                    "$type": "16|MissionOneParamIntEvent, Assembly-CSharp"
                },
                "damageToSuperate": 300,
                "damageAccumulated": 0
            }
        ]
    }
}